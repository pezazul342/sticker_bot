# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10xjuCaWYkfoejXtCJLT8ukYR6tfEVgHw
"""

import os
import requests
import telebot

# 🔹 CONFIGURACIÓN DEL BOT (Ahora toma las variables desde el entorno)
TOKEN = os.getenv("TOKEN")
USER_ID = os.getenv("USER_ID")
bot = telebot.TeleBot(TOKEN)

# 🔹 Diccionario para almacenar el estado de cada usuario
user_states = {}

### 📌 COMANDO /NEW (CREAR NUEVO PAQUETE) ###
@bot.message_handler(commands=['new'])
def start_new_pack(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "✏️ ¿Cómo quieres llamar a tu paquete de stickers?")
    user_states[chat_id] = {'step': 'awaiting_name'}

@bot.message_handler(func=lambda message: message.chat.id in user_states and user_states[message.chat.id]['step'] == 'awaiting_name')
def receive_pack_name(message):
    chat_id = message.chat.id
    raw_name = message.text.replace(" ", "_")
    sticker_set_name = f"{raw_name}_by_{bot.get_me().username}"
    user_states[chat_id]['sticker_set_name'] = sticker_set_name
    user_states[chat_id]['sticker_title'] = message.text
    user_states[chat_id]['step'] = 'awaiting_first_webm'

    bot.send_message(chat_id, "📤 Ahora envíame el primer archivo `.webm` para crear el paquete.")

### 📌 ELIGE UN PAQUETE ENVIANDO UN STICKER ###
@bot.message_handler(content_types=['sticker'])
def choose_sticker_pack(message):
    chat_id = message.chat.id
    sticker_set_name = message.sticker.set_name

    if not sticker_set_name:
        bot.send_message(chat_id, "❌ Este sticker no pertenece a un paquete válido.")
        return

    user_states[chat_id] = {'step': 'awaiting_webms', 'sticker_set_name': sticker_set_name}
    bot.send_message(chat_id, f"📤 Has seleccionado el paquete `{sticker_set_name}`.\n\nAhora envíame los archivos `.webm` y usa `/fin` cuando termines.", parse_mode="Markdown")

### 📌 COMANDO /FIN (ANTES ERA /FINISH) ###
@bot.message_handler(commands=['fin'])
def finish_update(message):
    chat_id = message.chat.id

    if chat_id not in user_states or user_states[chat_id]['step'] != 'awaiting_webms':
        bot.send_message(chat_id, "❌ No estás actualizando un paquete. Envía un sticker primero.")
        return

    sticker_set_name = user_states[chat_id]['sticker_set_name']
    total_stickers = count_stickers(sticker_set_name)
    bot.send_message(chat_id, f"✅ ¡Listo! Ahora el paquete `{sticker_set_name}` tiene {total_stickers} stickers.", parse_mode="Markdown")

    del user_states[chat_id]

### 📌 INICIAR EL BOT ###
if __name__ == "__main__":
    print("🤖 Bot en ejecución...")
    bot.polling(none_stop=True)